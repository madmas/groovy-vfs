import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

// ============================================================================
// (C) Copyright Schalk W. Cronje 2013
//
// This software is licensed under the Apache License 2.0
// See http://www.apache.org/licenses/LICENSE-2.0 for license details
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.
//
// ============================================================================

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
        classpath "org.ysb33r.gradle:gradletest:0.5.4"
    }
}

apply plugin : 'com.gradle.plugin-publish'
apply plugin : 'org.ysb33r.gradletest'

group = 'org.ysb33r.gradle'
archivesBaseName = 'vfs-gradle-plugin'

ext {
    gradleID = 'org.ysb33r.vfs'
    moduleName = 'vfs-gradle-plugin'
    bintrayDescription = 'This is a plugin for Gradle that utilises the Groovy VFS DSL'
    bintrayTags = ['gradle','groovy','vfs','groovy-vfs']
    bintrayAttributes = [ 'gradle-plugin' : "org.ysb33r.vfs:${group}:${archivesBaseName}" ]

    dslProject = dependencies.project( path:':groovy-vfs',configuration:'default')
}

configurations.all { exclude module: 'groovy-all' }

repositories{
    maven {
        //     For Milton.io WebDav server; required here to resolve transitive deps from :test-servers dependecy
        name 'ettrema-repo'
        url 'http://milton.io/maven/'
    }
}

dependencies {
    compile dslProject
//    compile project( path:':dsl',configuration:'default')
    compile gradleApi()
    compile localGroovy()

    compile 'org.slf4j:jcl-over-slf4j:1.7.2'

    testCompile project(':test-servers')

//    gradleTest project( path:':dsl',configuration:'default')
    gradleTest dslProject
    gradleTest 'commons-httpclient:commons-httpclient:3.1'

}


test {
    systemProperties TESTFSREADROOT : projectDir
}

jar {
    manifest {
        attributes 'Implementation-Title': moduleName, 'Implementation-Version': version
    }
}

apply from : '../gradle/publish.gradle'


pluginBundle {
    description = bintrayDescription
    website     = 'http://ysb33r.github.io/groovy-vfs'
    vcsUrl      = 'https://github.com/ysb33r/groovy-vfs.git'

    tags = bintrayTags

    plugins {
        vfsPlugin {
            id = gradleID
            displayName = 'Gradle VFS plugin'
        }
    }

    mavenCoordinates {
        groupId = project.group
        artifactId = archivesBaseName
    }

}

publishPlugins {
    onlyIf { !version.endsWith("SNAPSHOT") }
}

gradleTest {
    versions '2.0' ,'2.2', '2.3', '2.5', '2.8'

    onlyIf { !gradle.startParameter.isOffline() }
}

task foo << {

    def addDependency = { mavenDeps, dep, scope ->

println "+++ ${dep}"

        if(dep instanceof DefaultProjectDependency) {
            println "   ---- ${(dep as DefaultProjectDependency).dependencyProject.archivesBaseName}"
        }
        def mavenDep = new org.gradle.mvn3.org.apache.maven.model.Dependency()
        mavenDep.setGroupId(dep.getGroup());
        mavenDep.setArtifactId(dep.getName());
        mavenDep.setVersion(dep.getVersion());
        mavenDep.setScope(scope);

println "   *** ${mavenDep}"
        if (!dep.isTransitive()) {
            LOGGER.warn(format("Dependency %s:%s:%s is marked as non-transitive, but this is not"
                + "supported by the underlying Maven publishing mechanism",
                dep.getGroup(), dep.getName(), dep.getVersion()));
        }
        Set<ExcludeRule> excludeRules = dep.getExcludeRules();
        if (excludeRules != null) {
            for (ExcludeRule e : excludeRules) {
                def mavenEx = new org.gradle.mvn3.org.apache.maven.model.Exclusion();
                mavenEx.setGroupId(e.getGroup());
                mavenEx.setArtifactId(e.getModule());
                mavenDep.addExclusion(mavenEx);
            }
        }
        mavenDeps.add(mavenDep);
    }
    def addDependencies = { mavenDeps, config, scope ->
            for(org.gradle.api.artifacts.Dependency dep : config.getDependencies()) {
                if(dep instanceof ModuleDependency) {
                    addDependency(mavenDeps, (ModuleDependency) dep, scope);
                }
            }
    }

    def compile = configurations.getByName(JavaPlugin.COMPILE_CONFIGURATION_NAME)
    List<Dependency> mavenDeps = new ArrayList<Dependency>();
    addDependencies(mavenDeps, compile, org.gradle.api.artifacts.maven.Conf2ScopeMappingContainer.COMPILE)

    println mavenDeps
}

